#!/usr/bin/env bash

# Function to display a loading bar
update_loading_bar() {
    local current=$2
    local total=$2
    local song_name=$3
    local bar_length=38
    local progress=$((current * 100 / total))
    local num_hash=$((current * bar_length / total))
    local bar=$(printf "%-${bar_length}s" "#" | tr ' ' '#')
    local progress_bar="${bar:0:num_hash}"
    local padding_length=$((bar_length - num_hash))
    local padded_bar=$(printf "%-${padding_length}s" " ")
    progress_bar="${progress_bar}${padded_bar}"
    local title=$(printf "%-${bar_length}s" "$song_name")
    
    # Clear the line and move the cursor to the beginning
    printf "\r\033[K"

    # Display the loading bar and progress percentage
    printf "[%s] %d%% (%d/%d) %s" "$progress_bar" "$progress" "$current" "$total" "$title"
}


# Function to download a playlist
download_playlist() {
    local playlist="$1"
    local url="$2"
    
    echo "Fetching playlist information..."
    mkdir -p "$playlist"

    # Get the total number of videos in the playlist
    local total=$(yt-dlp --flat-playlist --print "%(id)s" "$url" 2>/dev/null | wc -l)
    echo "Found $total videos in playlist '$playlist'."

    # Download the playlist and track progress
    local count=0
    yt-dlp --ignore-errors --format bestaudio --extract-audio \
        --audio-format mp3 --audio-quality 160K \
        --output "$playlist/%(title)s.%(ext)s" --yes-playlist "$url" \
        2>/dev/null | while IFS= read -r line; do
            # Debugging line output
            if [[ "$line" == "[download] Destination:"* ]]; then
                count=$((count + 1))
                local song_name=$(echo "$line" | sed 's/.*Destination: //; s/.*\/\(.*\)\.[^.]*$/\1/')
                update_loading_bar "$count" "$total" "$song_name".
            fi
        done

    echo -e "\nPlaylist download completed."
}

# Trap interrupt signals (Ctrl+C) and display a message
trap 'echo -e "\nDownload interrupted. Exiting..."; exit 1' INT

# Parse command-line options
while getopts 'p:f:h' OPTION; do
    case "$OPTION" in
        p)
            if [ $# -eq 2 ]; then
                playlist=$(yt-dlp --no-warnings --flat-playlist --print "%(playlist_title)s" "$2" 2>/dev/null | head -1)
                download_playlist "$playlist" "$2"
            else
                echo "Error: Missing arguments for -p option."
                exit 1
            fi
            ;;
        f)
            echo "Downloading playlists from file ${OPTARG}"
            while IFS= read -r playlist url; do
                download_playlist "$playlist" "$url"
            done < "$OPTARG"
            ;;
        h)
            echo "Usage: $(basename "$0") [-p url] [-f file] [-h]"
            echo "  -p: Download a single playlist from URL"
            echo "  -f: Download multiple playlists from a file (format: 'playlist_name url')"
            echo "  -h: Display this help message"
            exit 0
            ;;
        ?)
            echo "Usage: $(basename "$0") [-p url] [-f file] [-h]" >&2
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))
